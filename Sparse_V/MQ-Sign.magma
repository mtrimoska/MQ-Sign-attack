/*** Functions for MQ-Sign keygen ***/

function V2(i, s)
  return (((i+s-1) mod v)+1);
end function;

function O2(i, s)
  return (((i+s-2) mod m)+v+1);
end function;

function Upper(M, nn)
  for i in [1..nn] do
    for j in [i+1..nn] do
      M[i][j] +:= M[j][i];
      M[j][i] := 0;
    end for;
  end for;
  return M;
end function;

function MQSignCentralMap()
  F := [];
  for s in [1..m] do
    M := ZeroMatrix(K,v+m,v+m);
    for i in [1..v] do
      M[i][V2(i, s)] := Random(K);
      M[i][O2(i, s)] := Random(K);
    end for;
    M := Upper(M, v+m);
    Append(~F, M);
  end for;
  return F;
end function;

function UpperTriangularS()
  up := HorizontalJoin(IdentityMatrix(K, v), RandomMatrix(K, v, m));
  down := HorizontalJoin(ZeroMatrix(K, m, v),IdentityMatrix(K, m));
  S := VerticalJoin(up, down);
  return S;
end function;

function GetPublicKey(F, S)
  S := Submatrix(S, 1, v+1, v, m);
  F1 := [Submatrix(F[s], 1, 1, v, v) : s in [1..m]];
  F2 := [Submatrix(F[s], 1, v+1, v, m) : s in [1..m]];
  P1 := [F1[s] : s in [1..m]];
  P2 := [(F1[s] + Transpose(F1[s]))*S + F2[s] : s in [1..m]];
  P3 := [Upper(Transpose(S)*F1[s]*S+Transpose(S)*F2[s], m) : s in [1..m]];
  P := [VerticalJoin(HorizontalJoin(P1[s], P2[s]), HorizontalJoin(ZeroMatrix(K, m, v), P3[s])) : s in [1..m]];
  return P;
end function;

function GetMQSignInstance()
  F := MQSignCentralMap();
  S := UpperTriangularS();
  P := GetPublicKey(F, S);
  return F, S, P;
end function;

/** 
function GetSolutionVector(R, F, S, P)
  found := false;
  while found eq false do
    v_vect := ElementToSequence(Random(VectorSpace(K, v)));
    X_ := Transpose(Matrix(R, v+m, v+m, v_vect cat [R.j : j in [1..m]] cat [0 : j in [1..v+m], i in [1..v+m-1]]));
    system := GetSystemP([], F, X_);
    monomials := GetLinearMonomials(R)[1..m];
    M := MQSpecificSystemToMacaulay(system, monomials);
    Y := Submatrix(M, 1, #monomials+1, #system, 1);
    M := Submatrix(M, 1, 1, #system, #monomials);
    found, solution := IsConsistent(M, Transpose(Y));
  end while;
  return v_vect cat ElementToSequence(solution), system;
end function;
**/

function GetSolutionVector(P, F, S)
  x := ElementToSequence(Random(VectorSpace(K, v+m)));
  x_M := Transpose(Matrix(K, v+m, v+m, x cat [0 : i in [1..(v+m)*(v+m-1)]]));
  Y_M := [Transpose(x_M)*P[s]*x_M : s in [1..m]];
  y := [Y_M[s][1][1] : s in [1..m]];

  /*x_check_M := S*x_M;
  Y_check_M := [Transpose(x_check_M)*F[s]*x_check_M : s in [1..m]];
  y_check := [Y_check_M[s][1][1] : s in [1..m]];
  y eq y_check;*/
  return x, y;
end function;

/*** END : Functions for MQ-Sign keygen ***/
